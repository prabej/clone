# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Fri Mar 15 21:21:20 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))